import { app, BrowserWindow, ipcMain } from 'electron';
import { channels } from './types';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    frame: false,
    minHeight: 400,
    minWidth: 400,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // mainWindow.webContents.openDevTools();

  const chatListener = (event: Electron.IpcMainEvent, data: string) => {    
    if (event.sender.id !== mainWindow.webContents.id) {
      mainWindow.webContents.send(channels.TRANSFER_CHAT_MESSAGE_TO_WINDOWS, data)
    }   
  }
  ipcMain.on(channels.SEND_CHAT_MESSAGE_TO_MAIN_PROCESS, chatListener);

  mainWindow.on('close', () => {
    ipcMain.removeListener(channels.SEND_CHAT_MESSAGE_TO_MAIN_PROCESS, chatListener);
  })
};

app.on('ready', createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.on(channels.OPEN_ADDITIONAL_WINDOW, createWindow);
